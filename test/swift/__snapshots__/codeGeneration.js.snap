// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a mutation with variables 1`] = `
"public final class CreateReviewMutation: GraphQLMutation {
  public static let operationString =
    \\"mutation CreateReview($episode: Episode) {\\" +
    \\"  createReview(episode: $episode, review: {stars: 5, commentary: \\\\\\"Wow!\\\\\\"}) {\\" +
    \\"    stars\\" +
    \\"    commentary\\" +
    \\"  }\\" +
    \\"}\\"

  public var episode: Episode?

  public init(episode: Episode? = nil) {
    self.episode = episode
  }

  public var variables: GraphQLMap? {
    return [\\"episode\\": episode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Mutation\\"]

    public static let selections: [Selection] = [
      Field(\\"createReview\\", arguments: [\\"episode\\": Variable(\\"episode\\"), \\"review\\": [\\"stars\\": 5, \\"commentary\\": \\"Wow!\\"]], type: .object(Data.CreateReview.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createReview: CreateReview? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Mutation\\", \\"createReview\\": createReview])
    }

    public var createReview: CreateReview? {
      get {
        return (snapshot[\\"createReview\\"]! as! Snapshot?).flatMap { CreateReview(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"createReview\\")
      }
    }

    public struct CreateReview: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Review\\"]

      public static let selections: [Selection] = [
        Field(\\"stars\\", type: .nonNull(.scalar(Int.self))),
        Field(\\"commentary\\", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(stars: Int, commentary: String? = nil) {
        self.init(snapshot: [\\"__typename\\": \\"Review\\", \\"stars\\": stars, \\"commentary\\": commentary])
      }

      /// The number of stars this review gave, 1-5
      public var stars: Int {
        get {
          return snapshot[\\"stars\\"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: \\"stars\\")
        }
      }

      /// Comment about the movie
      public var commentary: String? {
        get {
          return snapshot[\\"commentary\\"]! as! String?
        }
        set {
          snapshot.updateValue(newValue, forKey: \\"commentary\\")
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with a fragment spread nested in an inline fragment 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public static let operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ... on Droid {\\" +
    \\"      ...HeroDetails\\" +
    \\"    }\\" +
    \\"  }\\" +
    \\"}\\"

  public static var requestString: String { return operationString.appending(HeroDetails.fragmentString) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [Selection] = [
      Field(\\"hero\\", type: .object(Data.Hero.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(hero: Hero? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Query\\", \\"hero\\": hero])
    }

    public var hero: Hero? {
      get {
        return (snapshot[\\"hero\\"]! as! Snapshot?).flatMap { Hero(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [Selection] = [
        FragmentSpread(Hero.AsDroid.self),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public static func makeHuman() -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Human\\"])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      public var asDroid: AsDroid? {
        get {
          if !AsDroid.possibleTypes.contains(__typename) { return nil }
          return AsDroid(snapshot: snapshot)
        }
        set {
          guard let newValue = newValue else { return }
          snapshot = newValue.snapshot
        }
      }

      public struct AsDroid: GraphQLFragment {
        public static let possibleTypes = [\\"Droid\\"]

        public static let selections: [Selection] = [
          Field(\\"name\\", type: .nonNull(.scalar(String.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(name: String) {
          self.init(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
        }

        /// What others call this droid
        public var name: String {
          get {
            return snapshot[\\"name\\"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: \\"name\\")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(snapshot: snapshot)
          }
          set {
            snapshot = newValue.snapshot
          }
        }

        public struct Fragments {
          public var snapshot: Snapshot

          public var heroDetails: HeroDetails {
            get {
              return HeroDetails(snapshot: snapshot)
            }
            set {
              snapshot = newValue.snapshot
            }
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with conditional fragment spreads 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public static let operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...DroidDetails\\" +
    \\"  }\\" +
    \\"}\\"

  public static var requestString: String { return operationString.appending(DroidDetails.fragmentString) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [Selection] = [
      Field(\\"hero\\", type: .object(Data.Hero.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(hero: Hero? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Query\\", \\"hero\\": hero])
    }

    public var hero: Hero? {
      get {
        return (snapshot[\\"hero\\"]! as! Snapshot?).flatMap { Hero(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [Selection] = [
        FragmentSpread(Hero.AsDroid.self),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public static func makeHuman() -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Human\\"])
      }

      public static func makeDroid(primaryFunction: String? = nil) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"primaryFunction\\": primaryFunction])
      }

      public var asDroid: AsDroid? {
        get {
          if !AsDroid.possibleTypes.contains(__typename) { return nil }
          return AsDroid(snapshot: snapshot)
        }
        set {
          guard let newValue = newValue else { return }
          snapshot = newValue.snapshot
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(snapshot: snapshot)
        }
        set {
          snapshot = newValue.snapshot
        }
      }

      public struct AsDroid: GraphQLFragment {
        public static let possibleTypes = [\\"Droid\\"]

        public static let selections: [Selection] = [
          Field(\\"primaryFunction\\", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(primaryFunction: String? = nil) {
          self.init(snapshot: [\\"__typename\\": \\"Droid\\", \\"primaryFunction\\": primaryFunction])
        }

        /// This droid's primary function
        public var primaryFunction: String? {
          get {
            return snapshot[\\"primaryFunction\\"]! as! String?
          }
          set {
            snapshot.updateValue(newValue, forKey: \\"primaryFunction\\")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(snapshot: snapshot)
          }
          set {
            snapshot = newValue.snapshot
          }
        }

        public struct Fragments {
          public var snapshot: Snapshot

          public var droidDetails: DroidDetails {
            get {
              return DroidDetails(snapshot: snapshot)
            }
            set {
              snapshot = newValue.snapshot
            }
          }
        }
      }

      public struct Fragments {
        public var snapshot: Snapshot

        public var droidDetails: DroidDetails? {
          get {
            if !DroidDetails.possibleTypes.contains(snapshot[\\"__typename\\"]! as! String) { return nil }
            return DroidDetails(snapshot: snapshot)
          }
          set {
            guard let newValue = newValue else { return }
            snapshot = newValue.snapshot
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with fragment spreads 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public static let operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  public static var requestString: String { return operationString.appending(HeroDetails.fragmentString) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [Selection] = [
      Field(\\"hero\\", type: .object(Data.Hero.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(hero: Hero? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Query\\", \\"hero\\": hero])
    }

    public var hero: Hero? {
      get {
        return (snapshot[\\"hero\\"]! as! Snapshot?).flatMap { Hero(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [Selection] = [
        Field(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return snapshot[\\"name\\"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: \\"name\\")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(snapshot: snapshot)
        }
        set {
          snapshot = newValue.snapshot
        }
      }

      public struct Fragments {
        public var snapshot: Snapshot

        public var heroDetails: HeroDetails {
          get {
            return HeroDetails(snapshot: snapshot)
          }
          set {
            snapshot = newValue.snapshot
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() should generate a class declaration for a query with variables 1`] = `
"public final class HeroNameQuery: GraphQLQuery {
  public static let operationString =
    \\"query HeroName($episode: Episode) {\\" +
    \\"  hero(episode: $episode) {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"

  public var episode: Episode?

  public init(episode: Episode? = nil) {
    self.episode = episode
  }

  public var variables: GraphQLMap? {
    return [\\"episode\\": episode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [Selection] = [
      Field(\\"hero\\", arguments: [\\"episode\\": Variable(\\"episode\\")], type: .object(Data.Hero.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(hero: Hero? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Query\\", \\"hero\\": hero])
    }

    public var hero: Hero? {
      get {
        return (snapshot[\\"hero\\"]! as! Snapshot?).flatMap { Hero(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [Selection] = [
        Field(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return snapshot[\\"name\\"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: \\"name\\")
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() when generateOperationIds is specified should generate a class declaration with an operationId property 1`] = `
"public final class HeroQuery: GraphQLQuery {
  public static let operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  public static let operationIdentifier: String? = \\"90d0d674eb6a7b33776f63200d6cec3d09f881247c360a2ac9a29037a02210c4\\"

  public static var requestString: String { return operationString.appending(HeroDetails.fragmentString) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Query\\"]

    public static let selections: [Selection] = [
      Field(\\"hero\\", type: .object(Data.Hero.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(hero: Hero? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Query\\", \\"hero\\": hero])
    }

    public var hero: Hero? {
      get {
        return (snapshot[\\"hero\\"]! as! Snapshot?).flatMap { Hero(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: \\"hero\\")
      }
    }

    public struct Hero: GraphQLSelectionSet {
      public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

      public static let selections: [Selection] = [
        Field(\\"name\\", type: .nonNull(.scalar(String.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public static func makeHuman(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
      }

      public static func makeDroid(name: String) -> Hero {
        return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
      }

      /// The name of the character
      public var name: String {
        get {
          return snapshot[\\"name\\"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: \\"name\\")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(snapshot: snapshot)
        }
        set {
          snapshot = newValue.snapshot
        }
      }

      public struct Fragments {
        public var snapshot: Snapshot

        public var heroDetails: HeroDetails {
          get {
            return HeroDetails(snapshot: snapshot)
          }
          set {
            snapshot = newValue.snapshot
          }
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #classDeclarationForOperation() when generateOperationIds is specified should generate appropriate operation id mapping source when there are nested fragment references 1`] = `
"query Hero {
  hero {
    ...HeroDetails
  }
}
fragment HeroDetails on Character {
  ...HeroName
  appearsIn
}
fragment HeroName on Character {
  name
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for a property 1`] = `
"public init(episode: Episode) {
  self.episode = episode
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for an optional property 1`] = `
"public init(episode: Episode? = nil) {
  self.episode = episode
}"
`;

exports[`Swift code generation #initializerDeclarationForProperties() should generate initializer for multiple properties 1`] = `
"public init(episode: Episode? = nil, scene: String? = nil) {
  self.episode = episode
  self.scene = scene
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment that includes a fragment spread 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  ...MoreHeroDetails\\" +
    \\"}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    Field(\\"appearsIn\\", type: .nonNull(.list(.scalar(Episode.self)))),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  public static func makeDroid(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  /// The name of the character
  public var name: String {
    get {
      return snapshot[\\"name\\"]! as! String
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The movies this character appears in
  public var appearsIn: [Episode?] {
    get {
      return snapshot[\\"appearsIn\\"]! as! [Episode?]
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"appearsIn\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(snapshot: snapshot)
    }
    set {
      snapshot = newValue.snapshot
    }
  }

  public struct Fragments {
    public var snapshot: Snapshot

    public var moreHeroDetails: MoreHeroDetails {
      get {
        return MoreHeroDetails(snapshot: snapshot)
      }
      set {
        snapshot = newValue.snapshot
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with a concrete type condition 1`] = `
"public struct DroidDetails: GraphQLFragment {
  public static let fragmentString =
    \\"fragment DroidDetails on Droid {\\" +
    \\"  name\\" +
    \\"  primaryFunction\\" +
    \\"}\\"

  public static let possibleTypes = [\\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    Field(\\"primaryFunction\\", type: .scalar(String.self)),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public init(name: String, primaryFunction: String? = nil) {
    self.init(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
  }

  /// What others call this droid
  public var name: String {
    get {
      return snapshot[\\"name\\"]! as! String
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// This droid's primary function
  public var primaryFunction: String? {
    get {
      return snapshot[\\"primaryFunction\\"]! as! String?
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"primaryFunction\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with a subselection 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  friends {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    Field(\\"friends\\", type: .list(.object(HeroDetails.Friend.self))),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String, friends: [Friend?]? = nil) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"friends\\": friends])
  }

  public static func makeDroid(name: String, friends: [Friend?]? = nil) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"friends\\": friends])
  }

  /// The name of the character
  public var name: String {
    get {
      return snapshot[\\"name\\"]! as! String
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The friends of the character, or an empty list if they have none
  public var friends: [Friend?]? {
    get {
      return (snapshot[\\"friends\\"]! as! [Snapshot?]?).flatMap { $0.map { $0.flatMap { Friend(snapshot: $0) } } }
    }
    set {
      snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: \\"friends\\")
    }
  }

  public struct Friend: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

    public static let selections: [Selection] = [
      Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public static func makeHuman(name: String) -> Friend {
      return Friend(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
    }

    public static func makeDroid(name: String) -> Friend {
      return Friend(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    /// The name of the character
    public var name: String {
      get {
        return snapshot[\\"name\\"]! as! String
      }
      set {
        snapshot.updateValue(newValue, forKey: \\"name\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForFragment() should generate a struct declaration for a fragment with an abstract type condition 1`] = `
"public struct HeroDetails: GraphQLFragment {
  public static let fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  appearsIn\\" +
    \\"}\\"

  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    Field(\\"appearsIn\\", type: .nonNull(.list(.scalar(Episode.self)))),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  public static func makeDroid(name: String, appearsIn: [Episode?]) -> HeroDetails {
    return HeroDetails(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"appearsIn\\": appearsIn])
  }

  /// The name of the character
  public var name: String {
    get {
      return snapshot[\\"name\\"]! as! String
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  /// The movies this character appears in
  public var appearsIn: [Episode?] {
    get {
      return snapshot[\\"appearsIn\\"]! as! [Episode?]
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"appearsIn\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should escape reserved keywords in a struct declaration for a selection set 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", alias: \\"private\\", type: .scalar(String.self)),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(\`private\`: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"\`private\`\\": \`private\`])
  }

  public static func makeDroid(\`private\`: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"\`private\`\\": \`private\`])
  }

  public var \`private\`: String? {
    get {
      return snapshot[\\"private\\"]! as! String?
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"private\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a nested struct declaration for a selection set with subselections 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"friends\\", type: .list(.object(Hero.Friend.self))),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(friends: [Friend?]? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"friends\\": friends])
  }

  public static func makeDroid(friends: [Friend?]? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"friends\\": friends])
  }

  public var friends: [Friend?]? {
    get {
      return (snapshot[\\"friends\\"]! as! [Snapshot?]?).flatMap { $0.map { $0.flatMap { Friend(snapshot: $0) } } }
    }
    set {
      snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: \\"friends\\")
    }
  }

  public struct Friend: GraphQLSelectionSet {
    public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

    public static let selections: [Selection] = [
      Field(\\"name\\", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public static func makeHuman(name: String? = nil) -> Friend {
      return Friend(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
    }

    public static func makeDroid(name: String? = nil) -> Friend {
      return Friend(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
    }

    public var name: String? {
      get {
        return snapshot[\\"name\\"]! as! String?
      }
      set {
        snapshot.updateValue(newValue, forKey: \\"name\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a fragment spread nested in an inline fragment 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    FragmentSpread(Hero.AsDroid.self),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman() -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\"])
  }

  public static func makeDroid() -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\"])
  }

  public var asDroid: AsDroid? {
    get {
      if !AsDroid.possibleTypes.contains(__typename) { return nil }
      return AsDroid(snapshot: snapshot)
    }
    set {
      guard let newValue = newValue else { return }
      snapshot = newValue.snapshot
    }
  }

  public struct AsDroid: GraphQLFragment {
    public static let possibleTypes = [\\"Droid\\"]

    public static let selections: [Selection] = [
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init() {
      self.init(snapshot: [\\"__typename\\": \\"Droid\\"])
    }

    public var fragments: Fragments {
      get {
        return Fragments(snapshot: snapshot)
      }
      set {
        snapshot = newValue.snapshot
      }
    }

    public struct Fragments {
      public var snapshot: Snapshot

      public var heroDetails: HeroDetails {
        get {
          return HeroDetails(snapshot: snapshot)
        }
        set {
          snapshot = newValue.snapshot
        }
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .scalar(String.self)),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  public var name: String? {
    get {
      return snapshot[\\"name\\"]! as! String?
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with a fragment spread that matches the parent type 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .scalar(String.self)),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  public var name: String? {
    get {
      return snapshot[\\"name\\"]! as! String?
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(snapshot: snapshot)
    }
    set {
      snapshot = newValue.snapshot
    }
  }

  public struct Fragments {
    public var snapshot: Snapshot

    public var heroDetails: HeroDetails {
      get {
        return HeroDetails(snapshot: snapshot)
      }
      set {
        snapshot = newValue.snapshot
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with a fragment spread with a more specific type condition 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .scalar(String.self)),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name])
  }

  public var name: String? {
    get {
      return snapshot[\\"name\\"]! as! String?
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var fragments: Fragments {
    get {
      return Fragments(snapshot: snapshot)
    }
    set {
      snapshot = newValue.snapshot
    }
  }

  public struct Fragments {
    public var snapshot: Snapshot

    public var droidDetails: DroidDetails? {
      get {
        if !DroidDetails.possibleTypes.contains(snapshot[\\"__typename\\"]! as! String) { return nil }
        return DroidDetails(snapshot: snapshot)
      }
      set {
        guard let newValue = newValue else { return }
        snapshot = newValue.snapshot
      }
    }
  }
}"
`;

exports[`Swift code generation #structDeclarationForSelectionSet() should generate a struct declaration for a selection set with an inline fragment 1`] = `
"public struct Hero: GraphQLSelectionSet {
  public static let possibleTypes = [\\"Human\\", \\"Droid\\"]

  public static let selections: [Selection] = [
    Field(\\"name\\", type: .nonNull(.scalar(String.self))),
    FragmentSpread(Hero.AsDroid.self),
  ]

  public var snapshot: Snapshot

  public init(snapshot: Snapshot) {
    self.snapshot = snapshot
  }

  public static func makeHuman(name: String) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Human\\", \\"name\\": name])
  }

  public static func makeDroid(name: String, primaryFunction: String? = nil) -> Hero {
    return Hero(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
  }

  public var name: String {
    get {
      return snapshot[\\"name\\"]! as! String
    }
    set {
      snapshot.updateValue(newValue, forKey: \\"name\\")
    }
  }

  public var asDroid: AsDroid? {
    get {
      if !AsDroid.possibleTypes.contains(__typename) { return nil }
      return AsDroid(snapshot: snapshot)
    }
    set {
      guard let newValue = newValue else { return }
      snapshot = newValue.snapshot
    }
  }

  public struct AsDroid: GraphQLFragment {
    public static let possibleTypes = [\\"Droid\\"]

    public static let selections: [Selection] = [
      Field(\\"name\\", type: .nonNull(.scalar(String.self))),
      Field(\\"primaryFunction\\", type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(name: String, primaryFunction: String? = nil) {
      self.init(snapshot: [\\"__typename\\": \\"Droid\\", \\"name\\": name, \\"primaryFunction\\": primaryFunction])
    }

    public var name: String {
      get {
        return snapshot[\\"name\\"]! as! String
      }
      set {
        snapshot.updateValue(newValue, forKey: \\"name\\")
      }
    }

    public var primaryFunction: String? {
      get {
        return snapshot[\\"primaryFunction\\"]! as! String?
      }
      set {
        snapshot.updateValue(newValue, forKey: \\"primaryFunction\\")
      }
    }
  }
}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should escape identifiers in cases of enum declaration for a GraphQLEnumType 1`] = `
"public enum AlbumPrivacies: String {
  case \`public\` = \\"PUBLIC\\"
  case \`private\` = \\"PRIVATE\\"
}

extension AlbumPrivacies: Apollo.JSONDecodable, Apollo.JSONEncodable {}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should generate a struct declaration for a GraphQLInputObjectType 1`] = `
"/// The input object sent when someone is creating a new review
public struct ReviewInput: GraphQLMapConvertible {
  /// 0-5 stars
  public var stars: Int
  /// Comment about the movie, optional
  public var commentary: Optional<String?>
  /// Favorite color, optional
  public var favoriteColor: Optional<ColorInput?>

  public init(stars: Int, commentary: Optional<String?> = nil, favoriteColor: Optional<ColorInput?> = nil) {
    self.stars = stars
    self.commentary = commentary
    self.favoriteColor = favoriteColor
  }

  public var graphQLMap: GraphQLMap {
    return [\\"stars\\": stars, \\"commentary\\": commentary, \\"favorite_color\\": favoriteColor]
  }
}"
`;

exports[`Swift code generation #typeDeclarationForGraphQLType() should generate an enum declaration for a GraphQLEnumType 1`] = `
"/// The episodes in the Star Wars trilogy
public enum Episode: String {
  /// Star Wars Episode IV: A New Hope, released in 1977.
  case newhope = \\"NEWHOPE\\"
  /// Star Wars Episode V: The Empire Strikes Back, released in 1980.
  case empire = \\"EMPIRE\\"
  /// Star Wars Episode VI: Return of the Jedi, released in 1983.
  case jedi = \\"JEDI\\"
}

extension Episode: Apollo.JSONDecodable, Apollo.JSONEncodable {}"
`;
